#include <iostream>  // Підключення бібліотеки iostream для введення і виведення даних. 
                     // Забезпечує доступ до об'єктів std::cout (для виведення) і std::cin (для введення).

#include <cmath>     // Підключення бібліотеки cmath, яка містить математичні функції, такі як exp(), log(), cos(), cbrt() 
                     // і константу M_PI, що представляє число пі (π ≈ 3.14159).

int main()           // Функція main() є точкою входу в програму. Всі інструкції всередині main() будуть виконані при запуску програми.
{
    // Оголошення змінних 'a' та 'b' типу double для зберігання чисел з плаваючою крапкою, 
    // які користувач введе з клавіатури. Використовуємо тип double, щоб забезпечити точність обчислень.
    double a, b;  

    // Виведення запиту користувачу для введення значення 'a'.
    // std::cout виводить текст на екран (консоль).
    std::cout << "Enter a: ";  
    
    // std::cin читає введене користувачем значення і зберігає його у змінну 'a'.
    std::cin >> a;  

    // Виведення запиту для введення значення 'b'.
    std::cout << "Enter b: ";  
    
    // std::cin читає значення 'b', введене користувачем.
    std::cin >> b;  

    // Перевіряємо, чи сума значень 'b' та 'a' дорівнює нулю. Це необхідно, щоб уникнути ділення на нуль, 
    // яке є забороненою операцією в математиці та викличе помилку під час виконання програми.
    if (b + a == 0) {  
        // Якщо умова (b + a == 0) виконується, виводимо повідомлення про помилку.
        std::cout << "Error: b + a cannot equal zero!" << std::endl;  
    } else {
        // Якщо (b + a != 0), продовжуємо обчислення за формулою.
        
        // Обчислюємо дробовий вираз (a - b) / (b + a). Це основна частина формули. 
        // Спочатку обчислюється різниця між 'a' і 'b', потім ця різниця ділиться на (b + a). 
        double fraction = (a - b) / (b + a);  

        // Використовуємо функцію cos() для обчислення косинуса виразу (a - b), а потім множимо результат на (π / 8).
        // Викликаємо функцію log() для обчислення натурального логарифму (ln) від результату функції cos(). 
        // Значення M_PI використовується як константа для числа пі.
        double logarithm = log(cos(a - b) * (M_PI / 8));  

        // Обчислюємо експоненту (e^x), де x - це значення логарифма, поділеного на 0.137.
        // Це відповідає частині формули e ^ (ln[cos(...) / 0.137]).
        double exponent = exp(logarithm / 0.137);  

        // Використовуємо функцію cbrt(), яка обчислює кубічний корінь (корінь третього ступеня) 
        // від всього виразу: дробу 'fraction' помноженого на 'exponent'.
        double result = cbrt(fraction * exponent);  

        // Виведення результату обчислень. 'result' містить остаточний результат формули.
        std::cout << "Result: " << result << std::endl;  
    }

    // Завершуємо роботу програми і повертаємо значення 0, що означає успішне завершення.
    return 0;  
}
